#!/bin/bash
#
# Copyright 2019 Copyright (c) 2019 SAP SE or an SAP affiliate company. All rights reserved. This file is licensed under the Apache Software License, v. 2 except as noted otherwise in the LICENSE file.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

source "$SOWLIB/pluginutils"

getRequiredValue repo "repo" PLUGINCONFIGJSON
getValue tag "tag" PLUGINCONFIGJSON
getValue branch "branch" PLUGINCONFIGJSON
getValue commit "commit" PLUGINCONFIGJSON
getValueList files "files" PLUGINCONFIGJSON

if [ -n "$tag" ]; then
    # tag is given
    prefix="refs/tags/"
    ref="$tag"
    mode="tag"
    cmdmod="--branch $ref"
elif [ -n "$branch" ]; then
    # branch is given
    prefix=
    ref="$branch"
    mode="branch"
    cmdmod="--branch $ref"
elif [ -n "$commit" ]; then
    # commit is given
    prefix=
    ref="$commit"
    mode="commit"
    cmdmod=
else
    # nothing is given
    fail "either 'tag', 'branch', or 'commit' attribute is required"
fi

repo_path="$dir/repo"

deploy() {
    info "Cloning repo $repo ($mode $ref)..."

    if [ ! -d "$repo_path" ]; then
        mkdir -p "$repo_path"
        (
            cd "$repo_path"
            git init
            git remote add origin "$repo"
        )
    fi
    (
        cd "$repo_path"
        if [ $mode = "commit" ]; then
            git fetch -f -n origin
            git checkout $ref "${files[@]}"
        else
            git fetch --depth 1 -f origin $prefix$ref
            git checkout FETCH_HEAD "${files[@]}"
        fi
    )
}

delete() {
    true
}

case "$1" in
    deploy|prepare) deploy "$@";;
    delete|cleanup) delete "$@";;
    *) fail "unsupported action $1"
esac
