#!/usr/bin/env bash

K8S_setKubeConfig()
{
  local target="$GENDIR/${2:-kubeconfig}"
  getValueOrJSON DEFKUBE "$1.kubeconfig" DEPLOYMENTJSON
  if [ ${#DEFKUBE[@]} -eq 0 ]; then
    fail "no kubeconfig configured"
  fi
  if [ ${DEFKUBE[0]} == value ]; then
    local kubeconfig
    if [[ "${DEFKUBE[1]}" != /* ]]; then
      kubeconfig="$ROOT/${DEFKUBE[1]}"
    else
      kubeconfig="${DEFKUBE[1]}"
    fi
    cp "$kubeconfig" "$target"
    echo "    using $kubeconfig"
  else
    echo "${DEFKUBE[1]}" > "$target"
    echo "    using inline kubeconfig"
  fi
  export KUBECONFIG="$target"
}

################################################################################
# pod utilities
################################################################################

K8S_lookuppod() {
    # Doesn't work out of the box with jq on CoreOS
    ext=
    if [ "$1" == -d ]; then
        shift
        ext="-[a-z0-9]{9}"
    fi
    kubectl -n $1 get pods | (egrep "$2$ext-[a-z0-9]{5} " || true) | (grep Running || true)
}

K8S_checkpod() {
    name="$2"
    if [ $1 == "-d" ]; then
        name="$3"
    fi
    pods="$(K8S_lookuppod "$@")"
    if [ -n "$pods" ]; then
        echo "found $name"
        echo "$pods"
    else
        missing=x
        echo "no $name found"
    fi
}

K8S_assurepods() {
    $1
    if [ -n "$missing" ]; then
        $2
    echo "waiting for pods"
    while [ -n "$missing" ]; do
        sleep 10
        missing=
        $1
    done
    fi
}