#!/usr/bin/env bash
#
# Copyright 2019 Copyright (c) 2019 SAP SE or an SAP affiliate company. All rights reserved. This file is licensed under the Apache Software License, v. 2 except as noted otherwise in the LICENSE file.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

SOW="$(cd "$(dirname "${BASH_SOURCE[0]}")/.."; echo "$PWD" )"
SOWLIB="$SOW/lib"

export SOW
export SOWLIB

set -eo pipefail

MAINPRODUCT="<main>"

#echo "loading terms $CFG_TERMS"
#echo "loading struct $CFG_LAYOUT"
source "$SOW/layout/struct/$CFG_LAYOUT"
source "$SOW/layout/terms/$CFG_TERMS"

_determineCurrent()
{(
  if [ "$(pwd)" == "$ROOT" ]; then
    return
  fi
  while [ ! -f $1 ]; do
    cd ..
    if [ "$(pwd)" == / ]; then
      return
    fi
    if [ "$(pwd)" == "$ROOT" ]; then
      return
    fi
  done
  pwd
)}

determineCurrent()
{
  local c
  CURRENT=
  CURRENTTEMP=
  c="$(_determineCurrent $fCOMPDEF)"
  if [ -n "$c" ]; then
    CURRENT="$c"
  else
    c="$(_determineCurrent $fTEMPDEF)"
    if [ -n "$c" ]; then
      CURRENTTEMP="$c"
    fi
  fi
}

getProductDir()
{
  local dir="$1"
  if [ "$dir" = "$ROOT" ]; then
    echo "$dir/$dROOTPRODUCT"
    return
  fi
  if [ "$dir" = "$ROOT/$dROOTPRODUCT" ]; then
    echo "$dir"
    return
  fi
  while [ ! \( -d "$dir/$dCOMPONENTS" -o -d "$dir/$dTEMPLATES" \) ]; do
    if [ "$dir" == "$ROOT" ]; then
      return
    fi
    dir="${dir%/*}"
  done
  echo "$dir"
}

getProductForDir()
{
  if [ "$1" == "$ROOTPRODUCTDIR" ]; then
    echo "$MAINPRODUCT"
  else
    echo "${1##*/}"
  fi
}

determineRoot()
{(
  while [ ! -f $fCONFIG -o ! \( -d $dROOTPRODUCT -o -d garden \) -o -d "$dCOMPONENTS" ]; do
    cd ..
    if [ "$(pwd)" == / ]; then
      return
    fi
  done
  pwd
)}

getTemplateJSON()
{
  TEMPLATEJSON="$(spiff merge --json "$1" "$CONFIG")"
  if [ -z "$TEMPLATEJSON" ]; then
    TEMPLATEJSON="{}"
  fi
}

getComponentJSON()
{
  local stubs=( )
  setStubs stubs "lib/templates/component.yaml"
  COMPONENTJSON="$(spiff merge --json "$1" "${stubs[@]}" "$CONFIG" - <<<'{ "env": { "<<": "(( &inject ))", "COMPONENT": "'"$2"'", "PRODUCT": "'"$3"'" }}' )"
  if [ -z "$COMPONENTJSON" ]; then
    COMPONENTJSON="{}"
  fi
}

getImports()
{
  getLabeledValueList $1 component.imports $2
}


################################################################################
# analyse filesytem location 
# end determine execuition environment
################################################################################

ROOT="$(determineRoot)"
if [ -z "$ROOT" ]; then
  fail no acre found to $nTOOL
fi

export ROOT

export ROOTPRODUCTDIR="$ROOT/$dROOTPRODUCT"
export GEN="$ROOT/gen"
export STATE="$ROOT/state"
export EXPORT="$ROOT/export"

determineCurrent
if [ -n "$CURRENT" ]; then
  setComponent "$CURRENT"
  PRODUCTDIR="$productdir"
  if [ -z "$PRODUCTDIR" ]; then
    CURRENT=
  else
    PRODUCT="$product"
    COMPONENT="$component"
  fi
else
  if [ -n "$CURRENTTEMP" ]; then
    setTemplate "$CURRENTTEMP"
    PRODUCTDIR="$productdir"
    if [ -z "$PRODUCTDIR" ]; then
      CURRENTTEMP=
    else
      PRODUCT="$product"
      TEMPLATE="$template"
    fi
  else
    PRODUCTDIR="$(getProductDir "$(pwd)")"
    if [ -n "$PRODUCTDIR" ]; then
      PRODUCT="$(getProductForDir "$PRODUCTDIR")"
    else
      PRODUCT=
    fi
  fi
fi

GEN="$ROOT/gen"
STATE="$ROOT/state"
EXPORT="$ROOT/export"
CONFIG="$GEN/config.json"
META="$GEN/meta.json"

mkdir -p "$GEN" "$STATE" "$EXPORT"

if [ -f "$ROOTPRODUCTDIR/$fCONFIG" ]; then
  CONFIGJSON="$(spiff merge --json "$ROOTPRODUCTDIR/$fCONFIG" "$ROOT/$fCONFIG" || fail "processing $fCONFIG" )"
else
  CONFIGJSON="$(spiff merge --json "$ROOT/$fCONFIG" || fail "processing $fCONFIG")"
fi
jq . <<<"$CONFIGJSON" >"$CONFIG"

export GEN
export STATE
export EXPORT
export CONFIG
export META

export CURRENT
export ROOTPRODUCTDIR
export PRODUCTDIR
export PRODUCT
export COMPONENT
