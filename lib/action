#!/bin/bash

ACTION_setup()
{
  CURRENT="${COMPONENTS["$1"]}"
  if [ -z "$CURRENT" ]; then
    fail "unknonn $nCOMPONENT $1"
  fi
  COMPONENT="$1"

  debug "setting up environment for $nCOMPONENT $1"
  local comp
  getComponentMeta comp "$1"
  getComponentMetaProduct PRODUCT comp
  getMetaProductDir PRODUCTDIR "$PRODUCT"

  export CURRENT="$ROOT/$CURRENT"
  export PRODUCTDIR="$ROOT/$PRODUCTDIR"
  export PRODUCT
  export COMPONENT

  export GENDIR="$GEN/$COMPONENT"
  export STATEDIR="$STATE/$COMPONENT"
  export EXPORTDIR="$EXPORT/$COMPONENT"

  export CONFIGJSON
  export KUBECONFIG
  export DOMAIN
}

# $1; component
# $2+: action spec
ACTION_execute()
{
  ExecuteInSubshell ___execute "$@"
}

___execute()
{
    ACTION_setup "$1"
    shift
    "$@"
}

#
# step order
# - component (always)
# - deployment
# - plugins
# - state
# - export
#
action_deployment()
{
  action="$1"
  shift

  if [ "$action" = delete ]; then
    if [ ! -f "$EXPORTDIR/export.yaml" -a ! -d "$GENDIR" ]; then
      warn "$nCOMPONENT $COMPONENT already deleted or not yet deployed"
      return 0
    fi
  fi

  mkdir -p "$STATEDIR" "$GENDIR" "$EXPORTDIR"

  steps=( "$@" )
  if contains all "${steps[@]}"; then
    steps=( component prepare deployment plugins state export all )
  fi

  if [ -x "$ROOTPRODUCTDIR/lib/action" ]; then
    source "$ROOTPRODUCTDIR/lib/action"
  fi

  if [ -f "$CURRENT/action" ]; then
    info "using local action script"
    source "$CURRENT/action"
  fi


  ############################
  # evaluating component.yaml
  ############################
  #
  #  component:
  #    imports:   # list of optionally labelled imported components
  #    stubs:     # list of additional stub file for deployment processing
  #
  # imports:                                  imports:
  #    - comp                                    label: comp
  #    - label: comp
  #
  # imports are mapped to a yaml with a single key 'imports' as map of
  # all export.yaml content of imported components using the label as key
  # labels must be used for nested components (containing a /)
  #
  # stubs may be paths relative to the component or the garden folder
  #

  if contains component "${steps[@]}";then 
    if [ -f "$CURRENT/$fCOMPDEF" ]; then
      verbose "generating effective component manifest"
      getComponentJSON "$CURRENT/$fCOMPDEF"
    else
      COMPONENTJSON="{}"
    fi
    spiff merge - <<<"$COMPONENTJSON" > "$GENDIR/$fCOMPDEF" || fail "saving $fCOMPDEF"
  else
    COMPONENTJSON="$(spiff merge --json "$GENDIR/$fCOMPDEF")"
  fi
  export COMPONENTJSON

  ############################
  # prepare 
  ############################
  # 
  # The component.yaml may contain preparational plugin 
  # calls. They are executed with action prepare.
  #
  if contains prepare "${steps[@]}";then 
    exec_configured_plugins prepare "component.plugins" COMPONENTJSON
  fi

  # evaluate imports
  imports="{}"
  declare -A import_map
  getImports import_map COMPONENTJSON
  for a in "${!import_map[@]}"; do
      imp="${import_map[$a]}"
      # remove leanding and trailing spaces
      a="$(sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//'<<<"$a")"
      if [ -n "$a" -a -n "$imp" ]; then # clean spaces
          if [ ! -f "$EXPORT/$imp/export.yaml" ]; then
              fail "imported $nCOMPONENT $imp not deployed yet"
          fi
          setjsonjson imports "imports.$(echo "$a")" "$(cat "$EXPORT/$imp/export.yaml" | spiff merge --json - || fail "processing import for $imp")"
      fi
  done
  echo "$imports" | jq . > "$GENDIR/import.json"

  # evaluate additional stubs
  _get_value_list slist component.stubs COMPONENTJSON
  for i in "${slist[@]}"; do
    local stub
    stub="$(lookupStub "$i")"
    if [ -z "$stub" ]; then
      fail "stub '$i' not found"
    fi
    stubs=( "${stubs[@]}" "$stub" )
  done

  ######################
  # provide env stub
  ######################

  local env=""
  componentStub env
  echo "$env" >"$GENDIR/env.json"

  ############################
  # evaluating deployment.yaml
  ############################

  deploymentstubs=( )
  deployment=

  if [ ${#stubs[@]} -ne 0 ]; then
    verbose "using additional stubs"
    for i in "${stubs[@]}"; do
      verbose "- $i"
    done
  fi
  deploymentstubs=("$CURRENT/$fACTIONDEF" "${stubs[@]}" "$CONFIG" "$GENDIR/import.json")
  if [ -f "$STATEDIR/state.yaml" ]; then
      deploymentstubs=("${deploymentstubs[@]}" "$STATEDIR/state.yaml")
  fi
  deploymentstubs=("${deploymentstubs[@]}" "$GENDIR/env.json")


  if contains deployment "${steps[@]}";then 
    verbose "generating effective deployment manifest"
    if [ -f "$CURRENT/$fACTIONDEF" ]; then
        DEPLOYMENTJSON="$(spiff merge --json "${deploymentstubs[@]}" || fail "processing $fACTIONDEF")"
    fi
    if [ -z "$DEPLOYMENTJSON" ]; then
      DEPLOYMENTJSON="{}"
    fi
    spiff merge - <<<"$DEPLOYMENTJSON" > "$GENDIR/$fACTIONDEF" || fail "saving $fACTIONDEF"
  else 
    DEPLOYMENTJSON="$(spiff merge --json "$GENDIR/$fACTIONDEF")"
  fi
  export DEPLOYMENTJSON

  ############################
  # evaluating deployment.yaml
  ############################

  if contains plugins "${steps[@]}";then 
    case "$action" in
        (deploy)  exec_configured_plugins deploy "plugins" DEPLOYMENTJSON
                  if _is_function "deploy"; then
                     deploy "$@"
                  fi;;
        (delete)  if _is_function "delete"; then
                     delete "$@"
                  fi
                  exec_configured_plugins delete "plugins" DEPLOYMENTJSON;;
        (*) fail "unknown command $action";;
    esac
  fi

  ############################
  # cleanup 
  ############################
  # 
  # The component.yaml may contain preparational plugin 
  # calls. They are executed with action cleanup
  # fore component deletion.
  #
  if contains prepare "${steps[@]}";then 
    if [ "$action" = delete ]; then
      exec_configured_plugins cleanup "component.plugins" COMPONENTJSON
    fi
  fi

  if contains state "${steps[@]}";then 
    handle_state
  fi

  if contains export "${steps[@]}";then 
    handle_exports
  fi

  if contains all "${steps[@]}";then
    if [ "$action" = delete ]; then
      rm -rf "$GENDIR"
    fi
  fi
}

# $1: name
# $2: executable
# $3: action
# $4...: args
_exec_plugin()
{
  if [ -z "$hide" ]; then
    title "Plugin: $1[$3] ($2)"
  fi
  (
    if [ "${opts[plugin]}" = "${1}" ]; then
      export TRACE=X
      "${@:2}"
    else
      "${@:2}"
    fi
  )
}

# $1: action
# $2: spec json
# $3: variable holding config plugin is takem from (DEPLOYMENT or COMPONENT)
exec_plugin()
{
  local action="$1"
  local spec="$2"
  local name
  local dir
  local config
  local args=( )
  getValue name name spec
  getValue dir path spec
  getJSON config config spec
  getValueList args args spec
  
  export SETTINGSJSON="${!3}"
  export PLUGINCONFIGJSON="$config"
   
  local plugin_opts=( )
  if [ -n "$dir" ]; then
     PLUGININSTANCE="$dir"
  else
     PLUGININSTANCE=
  fi
  export PLUGININSTANCE

  local hide=
  if [ -n "$name" ]; then
    if [[ "$name" = -* ]]; then
      name="${name#-}" 
      hide=x
    fi
    if _is_function "${name}"; then
        _exec_plugin "${name}" "${name}" "${plugin_opts[@]}" "$action" "${args[@]}"
    else
       local plugin
       plugin="$(lookupPlugin "${name}")"
       if [ -n "$plugin" ]; then
          _exec_plugin "${name}" "$plugin" "${plugin_opts[@]}" "$action" "${args[@]}"
       else
         fail "no action function or plugin with name '${name}' found"
       fi
    fi
  fi
}


# $1: action
# $2: field path
# $3: variable holding config with fields
#
# plugins:
#   - <name>
#   - <name>: <arg>
#   - <name>:
#      - <arg1>
#      - <arg2>
#   - <name>:
#        config: <yaml>   # will be passed in env as PLUGINCONFIGJSON
#        args:
#          - <arg1>
# the plugins are executed in the given order for deployment and
# in the reverse order for deletion
exec_configured_plugins() {
  local action="$1"

  local order=
  if [ "$action" == "delete" ]; then
    order="| reverse"
  fi
  local plugins=( )
  local msg="executing configured plugins for action $action"
  getPluginList plugins "$2" "$3" "$order"
  for p in "${plugins[@]}"; do
    if [ -n "$msg" ]; then
      verbose "$msg"
      msg=
    fi
    exec_plugin "$1" "$p" "$3"
  done
  if [ -n "$msg" ]; then
    verbose "no plugins found for action $action"
  fi
}

handle_exports()
{
  title "generating exports"
  if [ "$action" != "delete" -a -f "$CURRENT/export.yaml" ]; then
      if [ -f "$STATEDIR/state.yaml" ]; then
          spiff merge "$CURRENT/export.yaml" "${deploymentstubs[@]}" "$STATEDIR/state.yaml" > "$EXPORTDIR/export.yaml" || fail "processing exports"
      else
          spiff merge "$CURRENT/export.yaml" "${deploymentstubs[@]}" > "$EXPORTDIR/export.yaml" || fail "processing exports"
      fi

      EXPORTJSON="$(spiff merge --json "$EXPORTDIR/export.yaml" || fail "reading exports")"
      _jq_get_value '(.files // empty) | keys[]' <<<"$EXPORTJSON" | while IFS= read -r line; do
        getValue  p "files.$line.path" EXPORTJSON
        if [ -z "$p" ]; then
          p="$line"
        fi
        getValue data "files.$line.data" EXPORTJSON

        echo "exporting file $p"
        echo "$data" > "$EXPORTDIR/$p"
      done
  else
    if [ "$action" = "delete" ]; then
      rm -rf "$EXPORTDIR"
    fi
  fi
}

restore() {
    cp "$STATEDIR/state.yaml.bak"  "$STATEDIR/state.yaml"
    exit 1
}

handle_state()
{
  title updating state
  if [ "$action" != "delete" -a -f "$CURRENT/state.yaml" ]; then
      if [ -f "$STATEDIR/state.yaml" ]; then
          cp "$STATEDIR/state.yaml"  "$STATEDIR/state.yaml.bak"
          if [ -n "$DEPLOYMENTJSON" ]; then
              echo "$DEPLOYMENTJSON" | (spiff merge "$CURRENT/state.yaml" "$STATEDIR/state.yaml.bak" - > "$STATEDIR/state.yaml" || restore)
          else
              (spiff merge "$CURRENT/state.yaml" "$STATEDIR/state.yaml.bak" > "$STATEDIR/state.yaml" || restore)
          fi
      else
          if [ -n "$DEPLOYMENTJSON" ]; then
              echo "$DEPLOYMENTJSON" | spiff merge "$CURRENT/state.yaml" - > "$STATEDIR/state.yaml"
          else
              spiff merge "$CURRENT/state.yaml" > "$STATEDIR/state.yaml"
          fi
      fi
  else
    if [ "$action" = "delete" ]; then
      rm -rf "$STATEDIR"
    fi
  fi
}
